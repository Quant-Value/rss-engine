---
- name: Configuración de Instancia EC2 Worker
  hosts: all
  become: yes
  tasks:
    - name: Instalar Git
      apt:
        name: git
        state: present

    - name: Descargar solo la carpeta 'scripts' desde GitHub usando git con Sparse Checkout
      git:
        repo: https://github.com/campusdualdevopsGrupo2/imatia-rss-engine.git
        dest: /home/ubuntu/imatia-rss-engine
        clone: yes
        update: no
        version: main

    - name: Habilitar Sparse Checkout
      shell: |
        git sparse-checkout init --cone
        git sparse-checkout set scripts/cloud
      args:
        chdir: /home/ubuntu/imatia-rss-engine

    - name: Copiar solo la carpeta 'scripts/cloud' al directorio de destino
      ansible.builtin.copy:
        src: "/home/ubuntu/imatia-rss-engine/scripts/cloud/"
        dest: "/home/ubuntu/scripts/"
        remote_src: yes
        mode: '0644'


    - name: Aplicar dos2unix a los archivos .sh copiados
      shell: |
        dos2unix /home/ubuntu/scripts/*.sh
        
    - name: Retrieve secret from AWS Secrets Manager
      command: >
        aws secretsmanager get-secret-value --secret-id "rss-engine-imatia" --query SecretString --output text
      register: secret_value

    - name: Set the password as a variable
      set_fact:
        elasticpass: "{{ secret_value.stdout | from_json | json_query('elasticpass') }}"

    - name: Write the secret to a .env file
      copy:
        dest: /home/ubuntu/scripts/.env
        content: |
          ES_PASSWORD={{ elasticpass }}
          AWS_ELASTICSEARCH_ALB_DNS=i00-{{ENVIRON}}-rss-engine-demo.campusdual.mkcampus.com
          METRICS_URL=http://i3-{{ENVIRON}}-rss-engine-demo.campusdual.mkcampus.com:4318/v1/metrics
          SW_SERVER=i8-{{ENVIRON}}-rss-engine-demo.campusdual.mkcampus.com
        mode: '0600'


    - name: Generate docker-compose.yml from template
      template:
        src: "/ansible/playbooks/docker-compose.yml.j2"
        dest: "/home/ubuntu/docker-compose.yml"
        mode: '0644'

    - name: Docker Compose
      command: docker compose up -d 
      args:
        chdir: /home/ubuntu

    - name: Obtener el ID del contenedor Docker
      command: "sudo docker ps --filter 'name=my_worker' -q"
      register: container_id
      changed_when: false
    
    - name: Verificar si se encontró el contenedor
      fail:
        msg: "No se encontró el contenedor 'my-worker'."
      when: container_id.stdout == ""


    - name: Establecer permisos para los scripts en el contenedor
      command: "sudo docker exec {{ container_id.stdout }} chmod +x /app/scripts/{{ item }}"
      loop:
        - job.sh
        - upload.sh
        - process_rss_batch.sh
        - metrics_rss.sh
