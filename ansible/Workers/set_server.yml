---
- name: Provisionar servidor para server
  hosts: localhost
  connection: local
  become: yes
  tasks:
    - name: Clone repository from GitHub
      ansible.builtin.git:
        repo: "https://github.com/campusdualdevopsGrupo2/imatia-rss-engine.git"
        dest: "/tmp/imatia-rss-engine"
        version: "main"
        force: yes

    - name: Copy docker-compose.yml file from repository
      ansible.builtin.copy:
        src: "/tmp/imatia-rss-engine/ansible/Workers/docker-compose-server.yml"  
        dest: "/home/ubuntu/docker-compose.yml"
        mode: "0644"
        
    - name: Crear un archivo de servicio systemd para el contenedor Docker
      copy:
        content: |
          [Unit]
          Description=Docker Container for my ECR app
          After=network.target

          [Service]
          # Ejecutar docker-compose pull para descargar las im√°genes antes de levantar los contenedores
          ExecStartPre=/usr/bin/docker compose -f /home/ubuntu/docker-compose.yml pull
          # Iniciar los contenedores en segundo plano con docker-compose
          ExecStart=/usr/bin/docker compose -f /home/ubuntu/docker-compose.yml up -d
          # Detener los contenedores
          ExecStop=/usr/bin/docker compose -f /home/ubuntu/docker-compose.yml down

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/mydockerapp.service
        mode: '0644'

    - name: Recargar los servicios systemd
      systemd:
        name: "mydockerapp.service"
        daemon_reload: yes
        enabled: yes
        state: started
    # Tarea 11: Detiene Elasticsearch usando Docker Compose
    - name: Stop workers with Docker Compose
      command: docker compose down
      args:
        chdir: /home/ubuntu

    # Tarea 12: Inicia Elasticsearch en segundo plano utilizando Docker Compose
    - name: Start workers with Docker Compose
      command: docker compose up -d
      args:
        chdir: /home/ubuntu

