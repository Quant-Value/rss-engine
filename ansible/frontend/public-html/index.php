<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Automatiza tu Carrera DevOps | Busca Ofertas de Trabajo Aquí | Imatia Bootcamp 2024/2025</title>
  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Dark theme styling */
    body {
      background-color: #343a40;
      color: #ffffff;
    }
    .form-control, .btn, .form-select {
      background-color: #495057;
      color: #ffffff;
      border: none;
    }
    .form-control:focus, .btn:focus, .form-select:focus {
      box-shadow: none;
    }
    .table {
      color: #ffffff;
    }
    .table thead th {
      border-bottom: 2px solid #6c757d;
    }
    .table td, .table th {
      vertical-align: middle;
    }
  </style>
</head>
<body>
  <div class="container py-5">
    <h1 class="mb-4">Automatiza tu Carrera DevOps | Busca Ofertas de Trabajo Aquí | Imatia Bootcamp 2024/2025</h1>
    <!-- Search Input -->
    <div class="mb-3">
      <input type="text" id="searchInput" class="form-control" placeholder="Enter search text">
    </div>
    <!-- Controls: sort order and search button -->
    <div class="row mb-3">
      <div class="col-md-4">
        <select id="sortOrder" class="form-select">
          <option value="asc">Ascending</option>
          <option value="desc">Descending</option>
        </select>
      </div>
      <div class="col-md-4">
        <button id="searchBtn" class="btn btn-primary">Search</button>
      </div>
    </div>
    <!-- Results Table -->
    <div id="results" class="mb-3">
      <table class="table table-dark table-hover">
        <thead>
          <tr id="tableHeader">
            <!-- Header generated by JS -->
          </tr>
        </thead>
        <tbody id="resultsBody">
          <!-- Results inserted via JS -->
        </tbody>
      </table>
    </div>
    <!-- Pagination Controls -->
    <nav>
      <ul class="pagination">
        <li class="page-item" id="prevPage"><a class="page-link" href="#">Previous</a></li>
        <li class="page-item disabled" id="pageInfo">
          <a class="page-link" href="#">Page <span id="currentPage">1</span></a>
        </li>
        <li class="page-item" id="nextPage"><a class="page-link" href="#">Next</a></li>
      </ul>
    </nav>
  </div>

  <script>
      
    // Editable configuration JSON object for index settings and fields
    let config = {
      esUrl: 'http://localhost:9200', // Elasticsearch endpoint
      index: 'your_index_name',       // Predefined index name
      predefinedFields: ['title', 'description', 'date'], // Fields to search and display
      defaultSortField: 'date',       // Field used for ordering
      resultsPerPage: 10              // Number of results per page
    };
    
    const fromVars = <?php echo json_encode(json_decode($_SERVER['APP_CONFIG'], true)); ?>
    
    config = {...config, ...fromVars || {} };

    let currentPage = 1;
    let totalHits = 0;

    // Build table header from predefined fields
    function generateTableHeader() {
      const headerRow = document.getElementById('tableHeader');
      headerRow.innerHTML = '';
      config.predefinedFields.forEach(field => {
        const th = document.createElement('th');
        th.textContent = field.charAt(0).toUpperCase() + field.slice(1);
        headerRow.appendChild(th);
      });
    }

    // Execute search via AJAX
    function performSearch() {
      const searchText = document.getElementById('searchInput').value;
      const sortOrder = document.getElementById('sortOrder').value;
      const from = (currentPage - 1) * config.resultsPerPage;
      
      // Build the Elasticsearch query
      const query = {
        from: from,
        size: config.resultsPerPage,
        query: searchText 
          ? { multi_match: { query: searchText, fields: config.predefinedFields } }
          : { match_all: {} },
        sort: [
          { [config.defaultSortField]: { order: sortOrder } }
        ]
      };

      // AJAX call to Elasticsearch
      fetch(`${config.esUrl}/${config.index}/_search`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(query)
      })
      .then(response => response.json())
      .then(data => {
        totalHits = data.hits.total.value || 0;
        renderResults(data.hits.hits);
        updatePagination();
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
    }

    // Render search results in table
    function renderResults(hits) {
      const resultsBody = document.getElementById('resultsBody');
      resultsBody.innerHTML = '';
      if (hits.length === 0) {
        const tr = document.createElement('tr');
        const td = document.createElement('td');
        td.setAttribute('colspan', config.predefinedFields.length);
        td.textContent = 'No results found.';
        tr.appendChild(td);
        resultsBody.appendChild(tr);
      } else {
        hits.forEach(hit => {
          const tr = document.createElement('tr');
          config.predefinedFields.forEach(field => {
            const td = document.createElement('td');
            td.textContent = hit._source[field] || '';
            tr.appendChild(td);
          });
          resultsBody.appendChild(tr);
        });
      }
    }

    // Update pagination controls based on current page and total hits
    function updatePagination() {
      document.getElementById('currentPage').textContent = currentPage;
      document.getElementById('prevPage').classList.toggle('disabled', currentPage === 1);
      const totalPages = Math.ceil(totalHits / config.resultsPerPage);
      document.getElementById('nextPage').classList.toggle('disabled', currentPage >= totalPages);
    }

    // Event listeners for interactions
    document.getElementById('searchBtn').addEventListener('click', () => {
      currentPage = 1; // reset page for new search
      performSearch();
    });

    document.getElementById('prevPage').addEventListener('click', (e) => {
      e.preventDefault();
      if (currentPage > 1) {
        currentPage--;
        performSearch();
      }
    });

    document.getElementById('nextPage').addEventListener('click', (e) => {
      e.preventDefault();
      const totalPages = Math.ceil(totalHits / config.resultsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        performSearch();
      }
    });

    // Initialize the header and perform an initial search
    generateTableHeader();
    performSearch();
  </script>
</body>
</html>
